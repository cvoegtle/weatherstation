<?xml version="1.0" encoding="utf-8"?>
<appengine-web-app xmlns="http://appengine.google.com/ns/1.0">
  <!-- baliwetter elbwetter forstwetter herzowetter instantwetter leo-wetter
       oxenwetter shenzhenwetter tegelwetter testwetter wettercentral wetterimages -->
  <application>instantwetter</application>
  <module>default</module>
  <version>46</version>

  <!--
    Allows App Engine to send multiple requests to one instance in parallel:
  -->
  <threadsafe>true</threadsafe>

  <static-files>
    <include path="**"/>

    <exclude path="/weatherstation/repair**"/>
    <exclude path="/weatherstation/upload**"/>
    <exclude path="/weatherstation/query**"/>
    <exclude path="/weatherstation/cache**"/>
  </static-files>

  <!-- Configure java.util.logging -->
  <system-properties>
    <property name="java.util.logging.config.file" value="WEB-INF/logging.properties"/>
    <property name="appengine.datastore.disableChunkSizeWarning" value="true"/>
  </system-properties>

  <instance-class>F1</instance-class>
  <automatic-scaling>
    <min-idle-instances>1</min-idle-instances>
    <max-idle-instances>1</max-idle-instances>
    <min-pending-latency>15s</min-pending-latency>
    <max-pending-latency>15s</max-pending-latency>
    <max-concurrent-requests>50</max-concurrent-requests>
  </automatic-scaling>


  <!--
    HTTP Sessions are disabled by default. To enable HTTP sessions specify:

      <sessions-enabled>true</sessions-enabled>

    It's possible to reduce request latency by configuring your application to
    asynchronously write HTTP session data to the datastore:

      <async-session-persistence enabled="true" />

    With this feature enabled, there is a very small chance your app will see
    stale session data. For details, see
    http://code.google.com/appengine/docs/java/config/appconfig.html#Enabling_Sessions
  -->

</appengine-web-app>
